// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Auis.StackOverflow.DataAccess.Compiledmodels
{
    public partial class StackOverflowDbContextModel
    {
        partial void Initialize()
        {
            var postEntity = PostEntityEntityType.Create(this);
            var webDataFileEntity = WebDataFileEntityEntityType.Create(this);

            PostEntityEntityType.CreateForeignKey1(postEntity, webDataFileEntity);

            PostEntityEntityType.CreateAnnotations(postEntity);
            WebDataFileEntityEntityType.CreateAnnotations(webDataFileEntity);

            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var postEntity = FindEntityType("Auis.StackOverflow.Models.Entities.PostEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            postEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var auisStackOverflowModelsEntitiesPostEntityTableBase = new TableBase("Auis.StackOverflow.Models.Entities.PostEntity", null, relationalModel);
            var answerColumnBase = new ColumnBase<ColumnMappingBase>("Answer", "nvarchar(max)", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Answer", answerColumnBase);
            var answerExternalLastActivityDateColumnBase = new ColumnBase<ColumnMappingBase>("AnswerExternalLastActivityDate", "datetimeoffset", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("AnswerExternalLastActivityDate", answerExternalLastActivityDateColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Id", idColumnBase);
            var questionColumnBase = new ColumnBase<ColumnMappingBase>("Question", "nvarchar(max)", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Question", questionColumnBase);
            var questionExternalLastActivityDateColumnBase = new ColumnBase<ColumnMappingBase>("QuestionExternalLastActivityDate", "datetimeoffset", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("QuestionExternalLastActivityDate", questionExternalLastActivityDateColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "nvarchar(250)", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Title", titleColumnBase);
            var webDataFileIdColumnBase = new ColumnBase<ColumnMappingBase>("WebDataFileId", "int", auisStackOverflowModelsEntitiesPostEntityTableBase);
            auisStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("WebDataFileId", webDataFileIdColumnBase);
            relationalModel.DefaultTables.Add("Auis.StackOverflow.Models.Entities.PostEntity", auisStackOverflowModelsEntitiesPostEntityTableBase);
            var auisStackOverflowModelsEntitiesPostEntityMappingBase = new TableMappingBase<ColumnMappingBase>(postEntity, auisStackOverflowModelsEntitiesPostEntityTableBase, true);
            auisStackOverflowModelsEntitiesPostEntityTableBase.AddTypeMapping(auisStackOverflowModelsEntitiesPostEntityMappingBase, false);
            defaultTableMappings.Add(auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, postEntity.FindProperty("Id")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)webDataFileIdColumnBase, postEntity.FindProperty("WebDataFileId")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answerColumnBase, postEntity.FindProperty("Answer")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answerExternalLastActivityDateColumnBase, postEntity.FindProperty("AnswerExternalLastActivityDate")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)questionColumnBase, postEntity.FindProperty("Question")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)questionExternalLastActivityDateColumnBase, postEntity.FindProperty("QuestionExternalLastActivityDate")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, postEntity.FindProperty("Title")!, auisStackOverflowModelsEntitiesPostEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            postEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var postsTable = new Table("Posts", "StackOverflow", relationalModel);
            var webDataFileIdColumn = new Column("WebDataFileId", "int", postsTable);
            postsTable.Columns.Add("WebDataFileId", webDataFileIdColumn);
            var idColumn = new Column("Id", "int", postsTable);
            postsTable.Columns.Add("Id", idColumn);
            var answerColumn = new Column("Answer", "nvarchar(max)", postsTable);
            postsTable.Columns.Add("Answer", answerColumn);
            var answerExternalLastActivityDateColumn = new Column("AnswerExternalLastActivityDate", "datetimeoffset", postsTable);
            postsTable.Columns.Add("AnswerExternalLastActivityDate", answerExternalLastActivityDateColumn);
            var questionColumn = new Column("Question", "nvarchar(max)", postsTable);
            postsTable.Columns.Add("Question", questionColumn);
            var questionExternalLastActivityDateColumn = new Column("QuestionExternalLastActivityDate", "datetimeoffset", postsTable);
            postsTable.Columns.Add("QuestionExternalLastActivityDate", questionExternalLastActivityDateColumn);
            var titleColumn = new Column("Title", "nvarchar(250)", postsTable);
            postsTable.Columns.Add("Title", titleColumn);
            var pK_Posts = new UniqueConstraint("PK_Posts", postsTable, new[] { webDataFileIdColumn, idColumn });
            postsTable.PrimaryKey = pK_Posts;
            var pK_PostsUc = RelationalModel.GetKey(this,
                "Auis.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId", "Id" });
            pK_Posts.MappedKeys.Add(pK_PostsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PostsUc).Add(pK_Posts);
            postsTable.UniqueConstraints.Add("PK_Posts", pK_Posts);
            relationalModel.Tables.Add(("Posts", "StackOverflow"), postsTable);
            var postsTableMapping = new TableMapping(postEntity, postsTable, true);
            postsTable.AddTypeMapping(postsTableMapping, false);
            tableMappings.Add(postsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, postEntity.FindProperty("Id")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(webDataFileIdColumn, postEntity.FindProperty("WebDataFileId")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(answerColumn, postEntity.FindProperty("Answer")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(answerExternalLastActivityDateColumn, postEntity.FindProperty("AnswerExternalLastActivityDate")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(questionColumn, postEntity.FindProperty("Question")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(questionExternalLastActivityDateColumn, postEntity.FindProperty("QuestionExternalLastActivityDate")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, postEntity.FindProperty("Title")!, postsTableMapping);

            var webDataFileEntity = FindEntityType("Auis.StackOverflow.Models.Entities.WebDataFileEntity")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            webDataFileEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var auisStackOverflowModelsEntitiesWebDataFileEntityTableBase = new TableBase("Auis.StackOverflow.Models.Entities.WebDataFileEntity", null, relationalModel);
            var externalLastModifiedColumnBase = new ColumnBase<ColumnMappingBase>("ExternalLastModified", "datetimeoffset", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("ExternalLastModified", externalLastModifiedColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Id", idColumnBase0);
            var isSynchronizationEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsSynchronizationEnabled", "bit", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("IsSynchronizationEnabled", isSynchronizationEnabledColumnBase);
            var linkColumnBase = new ColumnBase<ColumnMappingBase>("Link", "nvarchar(255)", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Link", linkColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Name", nameColumnBase);
            var processingStatusColumnBase = new ColumnBase<ColumnMappingBase>("ProcessingStatus", "int", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("ProcessingStatus", processingStatusColumnBase);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "bigint", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Size", sizeColumnBase);
            relationalModel.DefaultTables.Add("Auis.StackOverflow.Models.Entities.WebDataFileEntity", auisStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            var auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase = new TableMappingBase<ColumnMappingBase>(webDataFileEntity, auisStackOverflowModelsEntitiesWebDataFileEntityTableBase, true);
            auisStackOverflowModelsEntitiesWebDataFileEntityTableBase.AddTypeMapping(auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase, false);
            defaultTableMappings0.Add(auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, webDataFileEntity.FindProperty("Id")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalLastModifiedColumnBase, webDataFileEntity.FindProperty("ExternalLastModified")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSynchronizationEnabledColumnBase, webDataFileEntity.FindProperty("IsSynchronizationEnabled")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkColumnBase, webDataFileEntity.FindProperty("Link")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, webDataFileEntity.FindProperty("Name")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)processingStatusColumnBase, webDataFileEntity.FindProperty("ProcessingStatus")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, webDataFileEntity.FindProperty("Size")!, auisStackOverflowModelsEntitiesWebDataFileEntityMappingBase);

            var tableMappings0 = new List<TableMapping>();
            webDataFileEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var webDataFilesTable = new Table("WebDataFiles", "StackOverflow", relationalModel);
            var idColumn0 = new Column("Id", "int", webDataFilesTable);
            webDataFilesTable.Columns.Add("Id", idColumn0);
            var externalLastModifiedColumn = new Column("ExternalLastModified", "datetimeoffset", webDataFilesTable);
            webDataFilesTable.Columns.Add("ExternalLastModified", externalLastModifiedColumn);
            var isSynchronizationEnabledColumn = new Column("IsSynchronizationEnabled", "bit", webDataFilesTable);
            webDataFilesTable.Columns.Add("IsSynchronizationEnabled", isSynchronizationEnabledColumn);
            var linkColumn = new Column("Link", "nvarchar(255)", webDataFilesTable);
            webDataFilesTable.Columns.Add("Link", linkColumn);
            var nameColumn = new Column("Name", "nvarchar(255)", webDataFilesTable);
            webDataFilesTable.Columns.Add("Name", nameColumn);
            var processingStatusColumn = new Column("ProcessingStatus", "int", webDataFilesTable);
            webDataFilesTable.Columns.Add("ProcessingStatus", processingStatusColumn);
            var sizeColumn = new Column("Size", "bigint", webDataFilesTable);
            webDataFilesTable.Columns.Add("Size", sizeColumn);
            var pK_WebDataFiles = new UniqueConstraint("PK_WebDataFiles", webDataFilesTable, new[] { idColumn0 });
            webDataFilesTable.PrimaryKey = pK_WebDataFiles;
            var pK_WebDataFilesUc = RelationalModel.GetKey(this,
                "Auis.StackOverflow.Models.Entities.WebDataFileEntity",
                new[] { "Id" });
            pK_WebDataFiles.MappedKeys.Add(pK_WebDataFilesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_WebDataFilesUc).Add(pK_WebDataFiles);
            webDataFilesTable.UniqueConstraints.Add("PK_WebDataFiles", pK_WebDataFiles);
            relationalModel.Tables.Add(("WebDataFiles", "StackOverflow"), webDataFilesTable);
            var webDataFilesTableMapping = new TableMapping(webDataFileEntity, webDataFilesTable, true);
            webDataFilesTable.AddTypeMapping(webDataFilesTableMapping, false);
            tableMappings0.Add(webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, webDataFileEntity.FindProperty("Id")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(externalLastModifiedColumn, webDataFileEntity.FindProperty("ExternalLastModified")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(isSynchronizationEnabledColumn, webDataFileEntity.FindProperty("IsSynchronizationEnabled")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(linkColumn, webDataFileEntity.FindProperty("Link")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, webDataFileEntity.FindProperty("Name")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(processingStatusColumn, webDataFileEntity.FindProperty("ProcessingStatus")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, webDataFileEntity.FindProperty("Size")!, webDataFilesTableMapping);
            var fK_Posts_WebDataFiles_WebDataFileId = new ForeignKeyConstraint(
                "FK_Posts_WebDataFiles_WebDataFileId", postsTable, webDataFilesTable,
                new[] { webDataFileIdColumn },
                webDataFilesTable.FindUniqueConstraint("PK_WebDataFiles")!, ReferentialAction.NoAction);
            var fK_Posts_WebDataFiles_WebDataFileIdFk = RelationalModel.GetForeignKey(this,
                "Auis.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId" },
                "Auis.StackOverflow.Models.Entities.WebDataFileEntity",
                new[] { "Id" });
            fK_Posts_WebDataFiles_WebDataFileId.MappedForeignKeys.Add(fK_Posts_WebDataFiles_WebDataFileIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Posts_WebDataFiles_WebDataFileIdFk).Add(fK_Posts_WebDataFiles_WebDataFileId);
            postsTable.ForeignKeyConstraints.Add(fK_Posts_WebDataFiles_WebDataFileId);
            webDataFilesTable.ReferencingForeignKeyConstraints.Add(fK_Posts_WebDataFiles_WebDataFileId);
            return relationalModel.MakeReadOnly();
        }
    }
}
