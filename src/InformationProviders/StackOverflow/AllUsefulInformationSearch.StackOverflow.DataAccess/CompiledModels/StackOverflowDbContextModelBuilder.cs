// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace AllUsefulInformationSearch.StackOverflow.DataAccess.Compiledmodels
{
    public partial class StackOverflowDbContextModel
    {
        partial void Initialize()
        {
            var acceptedAnswerCommentEntity = AcceptedAnswerCommentEntityEntityType.Create(this);
            var acceptedAnswerEntity = AcceptedAnswerEntityEntityType.Create(this);
            var postCommentEntity = PostCommentEntityEntityType.Create(this);
            var postEntity = PostEntityEntityType.Create(this);
            var webDataFileEntity = WebDataFileEntityEntityType.Create(this);

            AcceptedAnswerCommentEntityEntityType.CreateForeignKey1(acceptedAnswerCommentEntity, acceptedAnswerEntity);
            AcceptedAnswerEntityEntityType.CreateForeignKey1(acceptedAnswerEntity, postEntity);
            PostCommentEntityEntityType.CreateForeignKey1(postCommentEntity, postEntity);
            PostEntityEntityType.CreateForeignKey1(postEntity, webDataFileEntity);

            AcceptedAnswerCommentEntityEntityType.CreateAnnotations(acceptedAnswerCommentEntity);
            AcceptedAnswerEntityEntityType.CreateAnnotations(acceptedAnswerEntity);
            PostCommentEntityEntityType.CreateAnnotations(postCommentEntity);
            PostEntityEntityType.CreateAnnotations(postEntity);
            WebDataFileEntityEntityType.CreateAnnotations(webDataFileEntity);

            AddAnnotation("ProductVersion", "8.0.4");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var acceptedAnswerCommentEntity = FindEntityType("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            acceptedAnswerCommentEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase = new TableBase("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity", null, relationalModel);
            var acceptedAnswerIdColumnBase = new ColumnBase<ColumnMappingBase>("AcceptedAnswerId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("AcceptedAnswerId", acceptedAnswerIdColumnBase);
            var acceptedAnswerPostWebDataFileIdColumnBase = new ColumnBase<ColumnMappingBase>("AcceptedAnswerPostWebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("AcceptedAnswerPostWebDataFileId", acceptedAnswerPostWebDataFileIdColumnBase);
            var externalCreationDateColumnBase = new ColumnBase<ColumnMappingBase>("ExternalCreationDate", "datetimeoffset", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("ExternalCreationDate", externalCreationDateColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("Id", idColumnBase);
            var textColumnBase = new ColumnBase<ColumnMappingBase>("Text", "nvarchar(max)", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("Text", textColumnBase);
            var webDataFileIdColumnBase = new ColumnBase<ColumnMappingBase>("WebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.Columns.Add("WebDataFileId", webDataFileIdColumnBase);
            relationalModel.DefaultTables.Add("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase);
            var allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase = new TableMappingBase<ColumnMappingBase>(acceptedAnswerCommentEntity, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase, true);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityTableBase.AddTypeMapping(allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase, false);
            defaultTableMappings.Add(allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, acceptedAnswerCommentEntity.FindProperty("Id")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)webDataFileIdColumnBase, acceptedAnswerCommentEntity.FindProperty("WebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acceptedAnswerIdColumnBase, acceptedAnswerCommentEntity.FindProperty("AcceptedAnswerId")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acceptedAnswerPostWebDataFileIdColumnBase, acceptedAnswerCommentEntity.FindProperty("AcceptedAnswerPostWebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalCreationDateColumnBase, acceptedAnswerCommentEntity.FindProperty("ExternalCreationDate")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textColumnBase, acceptedAnswerCommentEntity.FindProperty("Text")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerCommentEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            acceptedAnswerCommentEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var acceptedAnswerCommentsTable = new Table("AcceptedAnswerComments", "StackOverflow", relationalModel);
            var webDataFileIdColumn = new Column("WebDataFileId", "int", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("WebDataFileId", webDataFileIdColumn);
            var idColumn = new Column("Id", "int", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("Id", idColumn);
            var acceptedAnswerIdColumn = new Column("AcceptedAnswerId", "int", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("AcceptedAnswerId", acceptedAnswerIdColumn);
            var acceptedAnswerPostWebDataFileIdColumn = new Column("AcceptedAnswerPostWebDataFileId", "int", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("AcceptedAnswerPostWebDataFileId", acceptedAnswerPostWebDataFileIdColumn);
            var externalCreationDateColumn = new Column("ExternalCreationDate", "datetimeoffset", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("ExternalCreationDate", externalCreationDateColumn);
            var textColumn = new Column("Text", "nvarchar(max)", acceptedAnswerCommentsTable);
            acceptedAnswerCommentsTable.Columns.Add("Text", textColumn);
            var pK_AcceptedAnswerComments = new UniqueConstraint("PK_AcceptedAnswerComments", acceptedAnswerCommentsTable, new[] { webDataFileIdColumn, idColumn });
            acceptedAnswerCommentsTable.PrimaryKey = pK_AcceptedAnswerComments;
            var pK_AcceptedAnswerCommentsUc = RelationalModel.GetKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity",
                new[] { "WebDataFileId", "Id" });
            pK_AcceptedAnswerComments.MappedKeys.Add(pK_AcceptedAnswerCommentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AcceptedAnswerCommentsUc).Add(pK_AcceptedAnswerComments);
            acceptedAnswerCommentsTable.UniqueConstraints.Add("PK_AcceptedAnswerComments", pK_AcceptedAnswerComments);
            var iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId = new TableIndex(
            "IX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId", acceptedAnswerCommentsTable, new[] { acceptedAnswerPostWebDataFileIdColumn, acceptedAnswerIdColumn }, false);
            var iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdIx = RelationalModel.GetIndex(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity",
                new[] { "AcceptedAnswerPostWebDataFileId", "AcceptedAnswerId" });
            iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId.MappedIndexes.Add(iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdIx).Add(iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId);
            acceptedAnswerCommentsTable.Indexes.Add("IX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId", iX_AcceptedAnswerComments_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId);
            relationalModel.Tables.Add(("AcceptedAnswerComments", "StackOverflow"), acceptedAnswerCommentsTable);
            var acceptedAnswerCommentsTableMapping = new TableMapping(acceptedAnswerCommentEntity, acceptedAnswerCommentsTable, true);
            acceptedAnswerCommentsTable.AddTypeMapping(acceptedAnswerCommentsTableMapping, false);
            tableMappings.Add(acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, acceptedAnswerCommentEntity.FindProperty("Id")!, acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(webDataFileIdColumn, acceptedAnswerCommentEntity.FindProperty("WebDataFileId")!, acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(acceptedAnswerIdColumn, acceptedAnswerCommentEntity.FindProperty("AcceptedAnswerId")!, acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(acceptedAnswerPostWebDataFileIdColumn, acceptedAnswerCommentEntity.FindProperty("AcceptedAnswerPostWebDataFileId")!, acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(externalCreationDateColumn, acceptedAnswerCommentEntity.FindProperty("ExternalCreationDate")!, acceptedAnswerCommentsTableMapping);
            RelationalModel.CreateColumnMapping(textColumn, acceptedAnswerCommentEntity.FindProperty("Text")!, acceptedAnswerCommentsTableMapping);

            var acceptedAnswerEntity = FindEntityType("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            acceptedAnswerEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase = new TableBase("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity", null, relationalModel);
            var externalLastActivityDateColumnBase = new ColumnBase<ColumnMappingBase>("ExternalLastActivityDate", "datetimeoffset", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.Columns.Add("ExternalLastActivityDate", externalLastActivityDateColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.Columns.Add("Id", idColumnBase0);
            var postIdColumnBase = new ColumnBase<ColumnMappingBase>("PostId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.Columns.Add("PostId", postIdColumnBase);
            var postWebDataFileIdColumnBase = new ColumnBase<ColumnMappingBase>("PostWebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.Columns.Add("PostWebDataFileId", postWebDataFileIdColumnBase);
            var textColumnBase0 = new ColumnBase<ColumnMappingBase>("Text", "nvarchar(max)", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.Columns.Add("Text", textColumnBase0);
            relationalModel.DefaultTables.Add("AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity", allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase);
            var allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase = new TableMappingBase<ColumnMappingBase>(acceptedAnswerEntity, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase, true);
            allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityTableBase.AddTypeMapping(allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase, false);
            defaultTableMappings0.Add(allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, acceptedAnswerEntity.FindProperty("Id")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postWebDataFileIdColumnBase, acceptedAnswerEntity.FindProperty("PostWebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalLastActivityDateColumnBase, acceptedAnswerEntity.FindProperty("ExternalLastActivityDate")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postIdColumnBase, acceptedAnswerEntity.FindProperty("PostId")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textColumnBase0, acceptedAnswerEntity.FindProperty("Text")!, allUsefulInformationSearchStackOverflowModelsEntitiesAcceptedAnswerEntityMappingBase);

            var tableMappings0 = new List<TableMapping>();
            acceptedAnswerEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var acceptedAnswersTable = new Table("AcceptedAnswers", "StackOverflow", relationalModel);
            var postWebDataFileIdColumn = new Column("PostWebDataFileId", "int", acceptedAnswersTable);
            acceptedAnswersTable.Columns.Add("PostWebDataFileId", postWebDataFileIdColumn);
            var idColumn0 = new Column("Id", "int", acceptedAnswersTable);
            acceptedAnswersTable.Columns.Add("Id", idColumn0);
            var externalLastActivityDateColumn = new Column("ExternalLastActivityDate", "datetimeoffset", acceptedAnswersTable);
            acceptedAnswersTable.Columns.Add("ExternalLastActivityDate", externalLastActivityDateColumn);
            var postIdColumn = new Column("PostId", "int", acceptedAnswersTable);
            acceptedAnswersTable.Columns.Add("PostId", postIdColumn);
            var textColumn0 = new Column("Text", "nvarchar(max)", acceptedAnswersTable);
            acceptedAnswersTable.Columns.Add("Text", textColumn0);
            var pK_AcceptedAnswers = new UniqueConstraint("PK_AcceptedAnswers", acceptedAnswersTable, new[] { postWebDataFileIdColumn, idColumn0 });
            acceptedAnswersTable.PrimaryKey = pK_AcceptedAnswers;
            var pK_AcceptedAnswersUc = RelationalModel.GetKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity",
                new[] { "PostWebDataFileId", "Id" });
            pK_AcceptedAnswers.MappedKeys.Add(pK_AcceptedAnswersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AcceptedAnswersUc).Add(pK_AcceptedAnswers);
            acceptedAnswersTable.UniqueConstraints.Add("PK_AcceptedAnswers", pK_AcceptedAnswers);
            var iX_AcceptedAnswers_PostWebDataFileId_PostId = new TableIndex(
            "IX_AcceptedAnswers_PostWebDataFileId_PostId", acceptedAnswersTable, new[] { postWebDataFileIdColumn, postIdColumn }, true);
            var iX_AcceptedAnswers_PostWebDataFileId_PostIdIx = RelationalModel.GetIndex(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity",
                new[] { "PostWebDataFileId", "PostId" });
            iX_AcceptedAnswers_PostWebDataFileId_PostId.MappedIndexes.Add(iX_AcceptedAnswers_PostWebDataFileId_PostIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AcceptedAnswers_PostWebDataFileId_PostIdIx).Add(iX_AcceptedAnswers_PostWebDataFileId_PostId);
            acceptedAnswersTable.Indexes.Add("IX_AcceptedAnswers_PostWebDataFileId_PostId", iX_AcceptedAnswers_PostWebDataFileId_PostId);
            relationalModel.Tables.Add(("AcceptedAnswers", "StackOverflow"), acceptedAnswersTable);
            var acceptedAnswersTableMapping = new TableMapping(acceptedAnswerEntity, acceptedAnswersTable, true);
            acceptedAnswersTable.AddTypeMapping(acceptedAnswersTableMapping, false);
            tableMappings0.Add(acceptedAnswersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, acceptedAnswerEntity.FindProperty("Id")!, acceptedAnswersTableMapping);
            RelationalModel.CreateColumnMapping(postWebDataFileIdColumn, acceptedAnswerEntity.FindProperty("PostWebDataFileId")!, acceptedAnswersTableMapping);
            RelationalModel.CreateColumnMapping(externalLastActivityDateColumn, acceptedAnswerEntity.FindProperty("ExternalLastActivityDate")!, acceptedAnswersTableMapping);
            RelationalModel.CreateColumnMapping(postIdColumn, acceptedAnswerEntity.FindProperty("PostId")!, acceptedAnswersTableMapping);
            RelationalModel.CreateColumnMapping(textColumn0, acceptedAnswerEntity.FindProperty("Text")!, acceptedAnswersTableMapping);

            var postCommentEntity = FindEntityType("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            postCommentEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase = new TableBase("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity", null, relationalModel);
            var externalCreationDateColumnBase0 = new ColumnBase<ColumnMappingBase>("ExternalCreationDate", "datetimeoffset", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("ExternalCreationDate", externalCreationDateColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("Id", idColumnBase1);
            var postIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PostId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("PostId", postIdColumnBase0);
            var postWebDataFileIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PostWebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("PostWebDataFileId", postWebDataFileIdColumnBase0);
            var textColumnBase1 = new ColumnBase<ColumnMappingBase>("Text", "nvarchar(max)", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("Text", textColumnBase1);
            var webDataFileIdColumnBase0 = new ColumnBase<ColumnMappingBase>("WebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.Columns.Add("WebDataFileId", webDataFileIdColumnBase0);
            relationalModel.DefaultTables.Add("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity", allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase);
            var allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase = new TableMappingBase<ColumnMappingBase>(postCommentEntity, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase, true);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityTableBase.AddTypeMapping(allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase, false);
            defaultTableMappings1.Add(allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, postCommentEntity.FindProperty("Id")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)webDataFileIdColumnBase0, postCommentEntity.FindProperty("WebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalCreationDateColumnBase0, postCommentEntity.FindProperty("ExternalCreationDate")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postIdColumnBase0, postCommentEntity.FindProperty("PostId")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postWebDataFileIdColumnBase0, postCommentEntity.FindProperty("PostWebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textColumnBase1, postCommentEntity.FindProperty("Text")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostCommentEntityMappingBase);

            var tableMappings1 = new List<TableMapping>();
            postCommentEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var postCommentsTable = new Table("PostComments", "StackOverflow", relationalModel);
            var webDataFileIdColumn0 = new Column("WebDataFileId", "int", postCommentsTable);
            postCommentsTable.Columns.Add("WebDataFileId", webDataFileIdColumn0);
            var idColumn1 = new Column("Id", "int", postCommentsTable);
            postCommentsTable.Columns.Add("Id", idColumn1);
            var externalCreationDateColumn0 = new Column("ExternalCreationDate", "datetimeoffset", postCommentsTable);
            postCommentsTable.Columns.Add("ExternalCreationDate", externalCreationDateColumn0);
            var postIdColumn0 = new Column("PostId", "int", postCommentsTable);
            postCommentsTable.Columns.Add("PostId", postIdColumn0);
            var postWebDataFileIdColumn0 = new Column("PostWebDataFileId", "int", postCommentsTable);
            postCommentsTable.Columns.Add("PostWebDataFileId", postWebDataFileIdColumn0);
            var textColumn1 = new Column("Text", "nvarchar(max)", postCommentsTable);
            postCommentsTable.Columns.Add("Text", textColumn1);
            var pK_PostComments = new UniqueConstraint("PK_PostComments", postCommentsTable, new[] { webDataFileIdColumn0, idColumn1 });
            postCommentsTable.PrimaryKey = pK_PostComments;
            var pK_PostCommentsUc = RelationalModel.GetKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity",
                new[] { "WebDataFileId", "Id" });
            pK_PostComments.MappedKeys.Add(pK_PostCommentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PostCommentsUc).Add(pK_PostComments);
            postCommentsTable.UniqueConstraints.Add("PK_PostComments", pK_PostComments);
            var iX_PostComments_PostWebDataFileId_PostId = new TableIndex(
            "IX_PostComments_PostWebDataFileId_PostId", postCommentsTable, new[] { postWebDataFileIdColumn0, postIdColumn0 }, false);
            var iX_PostComments_PostWebDataFileId_PostIdIx = RelationalModel.GetIndex(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity",
                new[] { "PostWebDataFileId", "PostId" });
            iX_PostComments_PostWebDataFileId_PostId.MappedIndexes.Add(iX_PostComments_PostWebDataFileId_PostIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PostComments_PostWebDataFileId_PostIdIx).Add(iX_PostComments_PostWebDataFileId_PostId);
            postCommentsTable.Indexes.Add("IX_PostComments_PostWebDataFileId_PostId", iX_PostComments_PostWebDataFileId_PostId);
            relationalModel.Tables.Add(("PostComments", "StackOverflow"), postCommentsTable);
            var postCommentsTableMapping = new TableMapping(postCommentEntity, postCommentsTable, true);
            postCommentsTable.AddTypeMapping(postCommentsTableMapping, false);
            tableMappings1.Add(postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, postCommentEntity.FindProperty("Id")!, postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(webDataFileIdColumn0, postCommentEntity.FindProperty("WebDataFileId")!, postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(externalCreationDateColumn0, postCommentEntity.FindProperty("ExternalCreationDate")!, postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(postIdColumn0, postCommentEntity.FindProperty("PostId")!, postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(postWebDataFileIdColumn0, postCommentEntity.FindProperty("PostWebDataFileId")!, postCommentsTableMapping);
            RelationalModel.CreateColumnMapping(textColumn1, postCommentEntity.FindProperty("Text")!, postCommentsTableMapping);

            var postEntity = FindEntityType("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            postEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase = new TableBase("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity", null, relationalModel);
            var externalLastActivityDateColumnBase0 = new ColumnBase<ColumnMappingBase>("ExternalLastActivityDate", "datetimeoffset", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("ExternalLastActivityDate", externalLastActivityDateColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Id", idColumnBase2);
            var textColumnBase2 = new ColumnBase<ColumnMappingBase>("Text", "nvarchar(max)", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Text", textColumnBase2);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "nvarchar(250)", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("Title", titleColumnBase);
            var webDataFileIdColumnBase1 = new ColumnBase<ColumnMappingBase>("WebDataFileId", "int", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.Columns.Add("WebDataFileId", webDataFileIdColumnBase1);
            relationalModel.DefaultTables.Add("AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity", allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase);
            var allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase = new TableMappingBase<ColumnMappingBase>(postEntity, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase, true);
            allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityTableBase.AddTypeMapping(allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase, false);
            defaultTableMappings2.Add(allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, postEntity.FindProperty("Id")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)webDataFileIdColumnBase1, postEntity.FindProperty("WebDataFileId")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalLastActivityDateColumnBase0, postEntity.FindProperty("ExternalLastActivityDate")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textColumnBase2, postEntity.FindProperty("Text")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, postEntity.FindProperty("Title")!, allUsefulInformationSearchStackOverflowModelsEntitiesPostEntityMappingBase);

            var tableMappings2 = new List<TableMapping>();
            postEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var postsTable = new Table("Posts", "StackOverflow", relationalModel);
            var webDataFileIdColumn1 = new Column("WebDataFileId", "int", postsTable);
            postsTable.Columns.Add("WebDataFileId", webDataFileIdColumn1);
            var idColumn2 = new Column("Id", "int", postsTable);
            postsTable.Columns.Add("Id", idColumn2);
            var externalLastActivityDateColumn0 = new Column("ExternalLastActivityDate", "datetimeoffset", postsTable);
            postsTable.Columns.Add("ExternalLastActivityDate", externalLastActivityDateColumn0);
            var textColumn2 = new Column("Text", "nvarchar(max)", postsTable);
            postsTable.Columns.Add("Text", textColumn2);
            var titleColumn = new Column("Title", "nvarchar(250)", postsTable);
            postsTable.Columns.Add("Title", titleColumn);
            var pK_Posts = new UniqueConstraint("PK_Posts", postsTable, new[] { webDataFileIdColumn1, idColumn2 });
            postsTable.PrimaryKey = pK_Posts;
            var pK_PostsUc = RelationalModel.GetKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId", "Id" });
            pK_Posts.MappedKeys.Add(pK_PostsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PostsUc).Add(pK_Posts);
            postsTable.UniqueConstraints.Add("PK_Posts", pK_Posts);
            relationalModel.Tables.Add(("Posts", "StackOverflow"), postsTable);
            var postsTableMapping = new TableMapping(postEntity, postsTable, true);
            postsTable.AddTypeMapping(postsTableMapping, false);
            tableMappings2.Add(postsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, postEntity.FindProperty("Id")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(webDataFileIdColumn1, postEntity.FindProperty("WebDataFileId")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(externalLastActivityDateColumn0, postEntity.FindProperty("ExternalLastActivityDate")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(textColumn2, postEntity.FindProperty("Text")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, postEntity.FindProperty("Title")!, postsTableMapping);

            var webDataFileEntity = FindEntityType("AllUsefulInformationSearch.StackOverflow.Models.Entities.WebDataFileEntity")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            webDataFileEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase = new TableBase("AllUsefulInformationSearch.StackOverflow.Models.Entities.WebDataFileEntity", null, relationalModel);
            var externalLastModifiedColumnBase = new ColumnBase<ColumnMappingBase>("ExternalLastModified", "datetimeoffset", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("ExternalLastModified", externalLastModifiedColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Id", idColumnBase3);
            var isSynchronizationEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsSynchronizationEnabled", "bit", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("IsSynchronizationEnabled", isSynchronizationEnabledColumnBase);
            var linkColumnBase = new ColumnBase<ColumnMappingBase>("Link", "nvarchar(255)", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Link", linkColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Name", nameColumnBase);
            var processingStatusColumnBase = new ColumnBase<ColumnMappingBase>("ProcessingStatus", "int", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("ProcessingStatus", processingStatusColumnBase);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "bigint", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.Columns.Add("Size", sizeColumnBase);
            relationalModel.DefaultTables.Add("AllUsefulInformationSearch.StackOverflow.Models.Entities.WebDataFileEntity", allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase);
            var allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase = new TableMappingBase<ColumnMappingBase>(webDataFileEntity, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase, true);
            allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityTableBase.AddTypeMapping(allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase, false);
            defaultTableMappings3.Add(allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, webDataFileEntity.FindProperty("Id")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalLastModifiedColumnBase, webDataFileEntity.FindProperty("ExternalLastModified")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSynchronizationEnabledColumnBase, webDataFileEntity.FindProperty("IsSynchronizationEnabled")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkColumnBase, webDataFileEntity.FindProperty("Link")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, webDataFileEntity.FindProperty("Name")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)processingStatusColumnBase, webDataFileEntity.FindProperty("ProcessingStatus")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, webDataFileEntity.FindProperty("Size")!, allUsefulInformationSearchStackOverflowModelsEntitiesWebDataFileEntityMappingBase);

            var tableMappings3 = new List<TableMapping>();
            webDataFileEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var webDataFilesTable = new Table("WebDataFiles", "StackOverflow", relationalModel);
            var idColumn3 = new Column("Id", "int", webDataFilesTable);
            webDataFilesTable.Columns.Add("Id", idColumn3);
            var externalLastModifiedColumn = new Column("ExternalLastModified", "datetimeoffset", webDataFilesTable);
            webDataFilesTable.Columns.Add("ExternalLastModified", externalLastModifiedColumn);
            var isSynchronizationEnabledColumn = new Column("IsSynchronizationEnabled", "bit", webDataFilesTable);
            webDataFilesTable.Columns.Add("IsSynchronizationEnabled", isSynchronizationEnabledColumn);
            var linkColumn = new Column("Link", "nvarchar(255)", webDataFilesTable);
            webDataFilesTable.Columns.Add("Link", linkColumn);
            var nameColumn = new Column("Name", "nvarchar(255)", webDataFilesTable);
            webDataFilesTable.Columns.Add("Name", nameColumn);
            var processingStatusColumn = new Column("ProcessingStatus", "int", webDataFilesTable);
            webDataFilesTable.Columns.Add("ProcessingStatus", processingStatusColumn);
            var sizeColumn = new Column("Size", "bigint", webDataFilesTable);
            webDataFilesTable.Columns.Add("Size", sizeColumn);
            var pK_WebDataFiles = new UniqueConstraint("PK_WebDataFiles", webDataFilesTable, new[] { idColumn3 });
            webDataFilesTable.PrimaryKey = pK_WebDataFiles;
            var pK_WebDataFilesUc = RelationalModel.GetKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.WebDataFileEntity",
                new[] { "Id" });
            pK_WebDataFiles.MappedKeys.Add(pK_WebDataFilesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_WebDataFilesUc).Add(pK_WebDataFiles);
            webDataFilesTable.UniqueConstraints.Add("PK_WebDataFiles", pK_WebDataFiles);
            relationalModel.Tables.Add(("WebDataFiles", "StackOverflow"), webDataFilesTable);
            var webDataFilesTableMapping = new TableMapping(webDataFileEntity, webDataFilesTable, true);
            webDataFilesTable.AddTypeMapping(webDataFilesTableMapping, false);
            tableMappings3.Add(webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, webDataFileEntity.FindProperty("Id")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(externalLastModifiedColumn, webDataFileEntity.FindProperty("ExternalLastModified")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(isSynchronizationEnabledColumn, webDataFileEntity.FindProperty("IsSynchronizationEnabled")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(linkColumn, webDataFileEntity.FindProperty("Link")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, webDataFileEntity.FindProperty("Name")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(processingStatusColumn, webDataFileEntity.FindProperty("ProcessingStatus")!, webDataFilesTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, webDataFileEntity.FindProperty("Size")!, webDataFilesTableMapping);
            var fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId = new ForeignKeyConstraint(
                "FK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId", acceptedAnswerCommentsTable, acceptedAnswersTable,
                new[] { acceptedAnswerPostWebDataFileIdColumn, acceptedAnswerIdColumn },
                acceptedAnswersTable.FindUniqueConstraint("PK_AcceptedAnswers")!, ReferentialAction.NoAction);
            var fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdFk = RelationalModel.GetForeignKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerCommentEntity",
                new[] { "AcceptedAnswerPostWebDataFileId", "AcceptedAnswerId" },
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity",
                new[] { "PostWebDataFileId", "Id" });
            fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId.MappedForeignKeys.Add(fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerIdFk).Add(fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId);
            acceptedAnswerCommentsTable.ForeignKeyConstraints.Add(fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId);
            acceptedAnswersTable.ReferencingForeignKeyConstraints.Add(fK_AcceptedAnswerComments_AcceptedAnswers_AcceptedAnswerPostWebDataFileId_AcceptedAnswerId);
            var fK_AcceptedAnswers_Posts_PostWebDataFileId_PostId = new ForeignKeyConstraint(
                "FK_AcceptedAnswers_Posts_PostWebDataFileId_PostId", acceptedAnswersTable, postsTable,
                new[] { postWebDataFileIdColumn, postIdColumn },
                postsTable.FindUniqueConstraint("PK_Posts")!, ReferentialAction.NoAction);
            var fK_AcceptedAnswers_Posts_PostWebDataFileId_PostIdFk = RelationalModel.GetForeignKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.AcceptedAnswerEntity",
                new[] { "PostWebDataFileId", "PostId" },
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId", "Id" });
            fK_AcceptedAnswers_Posts_PostWebDataFileId_PostId.MappedForeignKeys.Add(fK_AcceptedAnswers_Posts_PostWebDataFileId_PostIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AcceptedAnswers_Posts_PostWebDataFileId_PostIdFk).Add(fK_AcceptedAnswers_Posts_PostWebDataFileId_PostId);
            acceptedAnswersTable.ForeignKeyConstraints.Add(fK_AcceptedAnswers_Posts_PostWebDataFileId_PostId);
            postsTable.ReferencingForeignKeyConstraints.Add(fK_AcceptedAnswers_Posts_PostWebDataFileId_PostId);
            var fK_PostComments_Posts_PostWebDataFileId_PostId = new ForeignKeyConstraint(
                "FK_PostComments_Posts_PostWebDataFileId_PostId", postCommentsTable, postsTable,
                new[] { postWebDataFileIdColumn0, postIdColumn0 },
                postsTable.FindUniqueConstraint("PK_Posts")!, ReferentialAction.NoAction);
            var fK_PostComments_Posts_PostWebDataFileId_PostIdFk = RelationalModel.GetForeignKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostCommentEntity",
                new[] { "PostWebDataFileId", "PostId" },
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId", "Id" });
            fK_PostComments_Posts_PostWebDataFileId_PostId.MappedForeignKeys.Add(fK_PostComments_Posts_PostWebDataFileId_PostIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PostComments_Posts_PostWebDataFileId_PostIdFk).Add(fK_PostComments_Posts_PostWebDataFileId_PostId);
            postCommentsTable.ForeignKeyConstraints.Add(fK_PostComments_Posts_PostWebDataFileId_PostId);
            postsTable.ReferencingForeignKeyConstraints.Add(fK_PostComments_Posts_PostWebDataFileId_PostId);
            var fK_Posts_WebDataFiles_WebDataFileId = new ForeignKeyConstraint(
                "FK_Posts_WebDataFiles_WebDataFileId", postsTable, webDataFilesTable,
                new[] { webDataFileIdColumn1 },
                webDataFilesTable.FindUniqueConstraint("PK_WebDataFiles")!, ReferentialAction.NoAction);
            var fK_Posts_WebDataFiles_WebDataFileIdFk = RelationalModel.GetForeignKey(this,
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.PostEntity",
                new[] { "WebDataFileId" },
                "AllUsefulInformationSearch.StackOverflow.Models.Entities.WebDataFileEntity",
                new[] { "Id" });
            fK_Posts_WebDataFiles_WebDataFileId.MappedForeignKeys.Add(fK_Posts_WebDataFiles_WebDataFileIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Posts_WebDataFiles_WebDataFileIdFk).Add(fK_Posts_WebDataFiles_WebDataFileId);
            postsTable.ForeignKeyConstraints.Add(fK_Posts_WebDataFiles_WebDataFileId);
            webDataFilesTable.ReferencingForeignKeyConstraints.Add(fK_Posts_WebDataFiles_WebDataFileId);
            return relationalModel.MakeReadOnly();
        }
    }
}
